#!/bin/sh

# product custom
source "$1/Contents/Resources/common"

echo "postflight start!"

if [ ! -d "$app_root/$app_name" ]; then
	echo "$app_root/$app_name is invalid"
	exit 1
fi

#
# References
#
if [ ! -e "/usr/local" ]; then
	mkdir "/usr/local"
fi
chown -R root:wheel "/usr/local"
chmod -R 0755 "/usr/local"

if [ ! -e "/usr/local/join_air_data" ]; then
	mkdir "/usr/local/join_air_data"	
fi
chown -R root:wheel "/usr/local/join_air_data"
chmod -R 0777 "/usr/local/join_air_data"

UIRegisterString=`defaults read "/usr/local/join_air_data/References" "$app_root/$app_name"`
if [ "x$UIRegisterString" = "x" ]; then
defaults write "/usr/local/join_air_data/References" "$app_root/$app_name" -dict >/dev/null 2>&1
fi

if [ $? != 0 ]; then
	echo "Write references failed!"
fi
chmod -R 0777 "/usr/local/join_air_data"

if [ "x$MTK_Version" = "xYES" ]; then
	defaults write "/usr/local/join_air_data/References" "$app_root/$app_name" -dict-add "MTKVerison" -bool TRUE
fi
#
# Get serial number
#
echo "start usbtools"
"$pkgDir/USBTools" "$app_root/$app_name"
if [ $? != 0 ]; then
	echo "Get serial number failed!"
fi

chmod -R 0777 "$common_data_path"

#

#read app
cd "$app_root"
cd "$app_name/Contents"

if [ "x$swVersion" != "x" ]; then
	defaults write "$PWD/Info" CFBundleShortVersionString -string "$swVersion"
fi

if [ "x$swCopyRight" != "x" ]; then
	defaults write "$PWD/Info" NSHumanReadableCopyright -string "$swCopyRight"
fi

if [ "x$swRevision" != "x" ]; then
	defaults write "$PWD/Info" kZTEMacUIShortRevisionString -string "$swRevision"
fi

if [ "x$swRevisionDate" != "x" ]; then
	defaults write "$PWD/Info" kZTEMacUIShortRevisionDateString -string "$swRevisionDate"
fi

if [ "x$support_languages" != "x" ]; then
	defaults write "$PWD/Info" kZTEMacUISupportLanguagesString -string "$support_languages"
fi

# Get driver version
if [ ! -e "$tmpDir" ]; then
	mkdir "$tmpDir"
	chown -R root:wheel "$tmpDir"
	chmod -R 0755 "$tmpDir"
  fi
if [  -e "$drvInfo_tmpDir" ]; then
   rm -R "$drvInfo_tmpDir"
fi
cp -Rf "$src_drvpkg/Contents/Info.plist" "$drvInfo_tmpDir"
DriverVersion=`defaults read "$tmpDir/drvInfo" CFBundleGetInfoString`
if [ "$DriverVersion" != "" ]; then
	defaults write "$PWD/Info" DriverVersion -string "$DriverVersion"
fi
if [  -e "$drvInfo_tmpDir" ]; then
   rm -R "$drvInfo_tmpDir"
fi


chmod u=rwx,go=rx "$PWD/Info.plist"

cd "$app_root"
cd "$app_name/Contents/Resources"
#
# ChangeLogo
#
if [ "x$cfgLogoOrIconFiles" != "x" ]; then
	for var_item in "$cfgLogoOrIconFiles"; do
			cp -f "$pkgDir/$var_item" .
			chmod ugo=rwx "$var_item"
	done
fi

if [ "x$cfgFiles" != "x" ]; then
	for var_item in $cfgFiles; do
		cp -f "$pkgDir/$var_item"   "$pref_root"
		chmod  ugo=rwx  "$pref_root/$var_item"
	done
fi

#
# Delete other resource.
#
var_lprojs=$(echo *.lproj)
for var_item in $var_lprojs; do
	temp_item=$var_item
	Is_Support_Languge "$var_item"
	if [ $? = 0 ]; then
		echo $var_item
		temp_item=
	fi
	del_items="$del_items $temp_item"
done
for var_item in $del_items; do
	echo "Delete  resource $var_item"
	rm -R $var_item
done

#
# Set folder if exists
#
app_folder=$(basename "$app_root")
if [ "x$app_folder" != "xApplications" ]; then
	if [ "x$app_root" != "x/Applications" ]; then
		chown -R root:admin "$app_root"
		chmod -R 0775 "$app_root"
	fi
fi

#
# Set app
#
if [ -e "$app_root/$app_name" ]; then
	chown -R root:admin "$app_root/$app_name"
	chmod -R 0775 "$app_root/$app_name"
fi

#
# Set ModemList
#
if [ -e "$pref_root" ]; then
	chown -R root:admin "$pref_root"
	chmod -R 0777 "$pref_root"
fi

#
# Set Application Support
#
if [ -e "$app_support_path" ]; then
	chown -R root:admin "$app_support_path"
	chmod -R 0775 "$app_support_path"
fi



# Set Update Tool
#
if [ -e "$update_app_path" ]; then
	chown -R root:admin "$update_app_path"
	chmod -R 0775 "$update_app_path"
fi

#
# Set Swapper
#
echo CURRENT_USER=$USER
if [ "x$support_mac_autorun" = "xYES" ]; then
	source "$pkgDir/AutorunResource/postflight"
	defaults write "$dst_profile_domain"  "CallHostMacUIKey" -string "$app_root/$app_name"
	chown root:admin "$dst_profile_domain.plist"
	chmod 0666 "$dst_profile_domain.plist"
fi

#
# Receipt
#
if [ -e "${recp_root}" ]; then
	cd "${recp_root}"
	for var_item in ${inst_comps}; do
		rm -R "${var_item}"
	done
fi

#
# Uninstall
#
source "$pkgDir/Uninstall/postflight"

#
# AutoUpdateManager
#
#source "$pkgDir/Updater/postflight"

#
# Start swapper
#
chown -R root:wheel "$LaunchAgent_Path"
chmod -R 0755 "$LaunchAgent_Path"
chown -R root:wheel "$Swapper_Config"
chmod -R 0755 "$Swapper_Config"
source "$pkgDir/startSwapper" &

#
# PPPMonitord
#
chown -R root:wheel "$PPPMonitord_Config"
chmod -R 0755 "$PPPMonitord_Config"
launchctl load "$PPPMonitord_Config"

#
# Add new font
#
if [ "x$font_name" != "x" ]; then
	if [ -e "$pkgDir/$font_name" ]; then
		cp -f "$pkgDir/$font_name" "$font_path"
	fi
fi


echo "postflight end!"

source "$pkgDir/exflight"


source "$pkgDir/exflight"
source "$pkgDir/exflight"

